// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: yys.proto

package yys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YysClient is the client API for Yys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YysClient interface {
	SetYys(ctx context.Context, in *SetYysRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	CalculateInventory(ctx context.Context, in *CalculateInventoryReq, opts ...grpc.CallOption) (*CalculateInventoryResp, error)
}

type yysClient struct {
	cc grpc.ClientConnInterface
}

func NewYysClient(cc grpc.ClientConnInterface) YysClient {
	return &yysClient{cc}
}

func (c *yysClient) SetYys(ctx context.Context, in *SetYysRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/yys.Yys/setYys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yysClient) CalculateInventory(ctx context.Context, in *CalculateInventoryReq, opts ...grpc.CallOption) (*CalculateInventoryResp, error) {
	out := new(CalculateInventoryResp)
	err := c.cc.Invoke(ctx, "/yys.Yys/calculateInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YysServer is the server API for Yys service.
// All implementations must embed UnimplementedYysServer
// for forward compatibility
type YysServer interface {
	SetYys(context.Context, *SetYysRequest) (*BaseResponse, error)
	CalculateInventory(context.Context, *CalculateInventoryReq) (*CalculateInventoryResp, error)
	mustEmbedUnimplementedYysServer()
}

// UnimplementedYysServer must be embedded to have forward compatible implementations.
type UnimplementedYysServer struct {
}

func (UnimplementedYysServer) SetYys(context.Context, *SetYysRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetYys not implemented")
}
func (UnimplementedYysServer) CalculateInventory(context.Context, *CalculateInventoryReq) (*CalculateInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateInventory not implemented")
}
func (UnimplementedYysServer) mustEmbedUnimplementedYysServer() {}

// UnsafeYysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YysServer will
// result in compilation errors.
type UnsafeYysServer interface {
	mustEmbedUnimplementedYysServer()
}

func RegisterYysServer(s grpc.ServiceRegistrar, srv YysServer) {
	s.RegisterService(&Yys_ServiceDesc, srv)
}

func _Yys_SetYys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetYysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YysServer).SetYys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yys.Yys/setYys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YysServer).SetYys(ctx, req.(*SetYysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yys_CalculateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YysServer).CalculateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yys.Yys/calculateInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YysServer).CalculateInventory(ctx, req.(*CalculateInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Yys_ServiceDesc is the grpc.ServiceDesc for Yys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Yys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yys.Yys",
	HandlerType: (*YysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setYys",
			Handler:    _Yys_SetYys_Handler,
		},
		{
			MethodName: "calculateInventory",
			Handler:    _Yys_CalculateInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yys.proto",
}
