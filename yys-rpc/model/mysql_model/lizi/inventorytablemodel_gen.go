// Code generated by goctl. DO NOT EDIT!

package lizi

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	inventoryTableFieldNames          = builder.RawFieldNames(&InventoryTable{})
	inventoryTableRows                = strings.Join(inventoryTableFieldNames, ",")
	inventoryTableRowsExpectAutoSet   = strings.Join(stringx.Remove(inventoryTableFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	inventoryTableRowsWithPlaceHolder = strings.Join(stringx.Remove(inventoryTableFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMytest1InventoryTableIdPrefix = "cache:mytest1:inventoryTable:id:"
)

type (
	inventoryTableModel interface {
		Insert(ctx context.Context, data *InventoryTable) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InventoryTable, error)
		Update(ctx context.Context, data *InventoryTable) error
		Delete(ctx context.Context, id int64) error
	}

	defaultInventoryTableModel struct {
		sqlc.CachedConn
		table string
	}

	InventoryTable struct {
		Id             int64  `db:"id"`
		InventoryId    string `db:"inventory_id"`
		Pos            int64  `db:"pos"`              // 位置
		Qua            int64  `db:"qua"`              // 星星
		Name           string `db:"name"`             // 御魂名称
		AttrsMainName  string `db:"attrs_main_name"`  // 主属性名称
		AttrsMainValue string `db:"attrs_main_value"` // 主属性数值
	}
)

func newInventoryTableModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultInventoryTableModel {
	return &defaultInventoryTableModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`inventory_table`",
	}
}

func (m *defaultInventoryTableModel) Delete(ctx context.Context, id int64) error {
	mytest1InventoryTableIdKey := fmt.Sprintf("%s%v", cacheMytest1InventoryTableIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mytest1InventoryTableIdKey)
	return err
}

func (m *defaultInventoryTableModel) FindOne(ctx context.Context, id int64) (*InventoryTable, error) {
	mytest1InventoryTableIdKey := fmt.Sprintf("%s%v", cacheMytest1InventoryTableIdPrefix, id)
	var resp InventoryTable
	err := m.QueryRowCtx(ctx, &resp, mytest1InventoryTableIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", inventoryTableRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryTableModel) Insert(ctx context.Context, data *InventoryTable) (sql.Result, error) {
	mytest1InventoryTableIdKey := fmt.Sprintf("%s%v", cacheMytest1InventoryTableIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, inventoryTableRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.InventoryId, data.Pos, data.Qua, data.Name, data.AttrsMainName, data.AttrsMainValue)
	}, mytest1InventoryTableIdKey)
	return ret, err
}

func (m *defaultInventoryTableModel) Update(ctx context.Context, data *InventoryTable) error {
	mytest1InventoryTableIdKey := fmt.Sprintf("%s%v", cacheMytest1InventoryTableIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, inventoryTableRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.InventoryId, data.Pos, data.Qua, data.Name, data.AttrsMainName, data.AttrsMainValue, data.Id)
	}, mytest1InventoryTableIdKey)
	return err
}

func (m *defaultInventoryTableModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMytest1InventoryTableIdPrefix, primary)
}

func (m *defaultInventoryTableModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", inventoryTableRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultInventoryTableModel) tableName() string {
	return m.table
}
