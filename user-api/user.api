type (
	BaseReq {
		Code int `json:"code"`
	}
	UserReq {
		Id int `path:"id"`
	}

	UserReply {
		Id   int    `json:"id"`
		Name string `json:"name"`
	}

	JwtReply {
		Token  string `json:"token"`
		Expire int64  `json:"expire"`
	}

	YysReq {
		Ordersn string `json:"ordersn"`
	}

	CalculateInventoryReq {
		Ordersn          string `json:"ordersn"`
		DefaultCritRate  string `json:"default_crit_rate"`
		DefaultCritPower string `json:"default_crit_power"`
	}

	CalculateInventoryResp {
		Rst []InventoryBig `json:"rst"`
	}

	InventoryBig {
		Rst []Inventory `json:"rst"`
	}

	Inventory {
		Name            string       `json:"name"`
		Pos             int          `json:"pos"`
		Attr            string       `json:"attr"`
		InventoryId     string       `json:"inventory_id"`
		SecondAttr      []SecondAttr `json:"second_attr"`
		SingleAttrValue float64      `json:"single_attr_value"`
		SingleAttrName  string       `json:"single_attr_name"`
	}

	SecondAttr {
		Name  string  `json:"name"`
		Value float64 `json:"value"`
	}
)
@server(
	jwt: Auth
	middleware: TestMiddleware1
)
service user {
	@handler getUser
	get /api/user/get/:id (UserReq) returns (UserReply)
}

service user {
	@handler getJWT
	get /api/user/jwt returns (JwtReply)
}

service user {
	@handler setYys
	get /api/yys/setYys (YysReq) returns (BaseReq)
	@handler calculateInventory
	get /api/yys/calculateInventory (CalculateInventoryReq) returns (CalculateInventoryResp)
}